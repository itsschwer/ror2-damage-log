name: create-release
run-name: Creating and tagging a new release
on: workflow_dispatch

jobs:
  create-artifact:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Read Thunderstore/manifest.json
        id: manifest
        shell: pwsh
        run: |
          $manifest = Get-Content -Raw -path Thunderstore/manifest.json
          $manifest -match '"name":\s*"([\w\d]+)"'
          echo "NAME=$($matches[1])" >> $env:GITHUB_OUTPUT
          $manifest -match '"version_number":\s*"([.\d\w-+]+)"'
          echo "VERSION=$($matches[1])" >> $env:GITHUB_OUTPUT

      - name: Read src/Plugin.cs
        env:
          NAME: ${{ steps.manifest.outputs.NAME }}
          VERSION: ${{ steps.manifest.outputs.VERSION }}
        shell: pwsh
        run: |
          $plugin = Get-Content -Raw -path src/Plugin.cs
          $plugin -match 'const\s+string\s+Name\s*=\s*"([\w\d]+)"'
          $name = $matches[1]
          $plugin -match 'const\s+string\s+Version\s*=\s*"([.\d\w-+]+)"'
          $version = $matches[1]
          echo "$name--$version | $env:NAME--$env:VERSION"
          if ( ( $name -ne $env:NAME ) -or ( $version -ne $env:VERSION ) ) { Write-Error -ErrorAction Stop -Message "Inconsistency between manifest.json and Plugin.cs" }

      - uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x
      - name: Build project
        id: build
        shell: pwsh
        run: |
          cd src
          $output = dotnet build --configuration Release
          "$($output)" -match "Package prepared ->\s*'([^\n\r\t]+)'"
          echo "PATH=$($matches[1])" >> $env:GITHUB_OUTPUT

      - uses: actions/upload-artifact@v4
        with:
          path: ${{ steps.build.outputs.PATH }}
          name: ${{ steps.manifest.outputs.NAME }}--${{ steps.manifest.outputs.VERSION }}
    outputs:
      name: ${{ steps.manifest.outputs.NAME }}--${{ steps.manifest.outputs.VERSION }}
      version: ${{ steps.manifest.outputs.VERSION }}
  
  create-release:
    needs: create-artifact
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: ${{ needs.create-artifact.outputs.name }}      
          # [feat req] Keep artifact in ZIP format instead of extracting
          # https://github.com/actions/download-artifact/issues/143

      - name: zip
        run: |
          ls -1 -r
          zip -r ${{ needs.create-artifact.outputs.name }}.zip .
      
      - uses: ncipollo/release-action@v1
        with:
          artifacts: ${{ needs.create-artifact.outputs.name }}.zip
          tag: ${{ needs.create-artifact.outputs.version }}
          skipIfReleaseExists: true
          updateOnlyUnreleased: true
